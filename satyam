import java.util.ArrayList;
import java.util.Scanner;

class Employee {
    int id;
    String name;
    double salary;

    public Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Salary: " + salary;
    }
}

public class EmployeeManagementSystem {
    private static ArrayList<Employee> employees = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nEmployee Management System:");
            System.out.println("1. Add Employee");
            System.out.println("2. Update Employee");
            System.out.println("3. Remove Employee");
            System.out.println("4. Search Employee");
            System.out.println("5. Display All Employees");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addEmployee(scanner);
                    break;
                case 2:
                    updateEmployee(scanner);
                    break;
                case 3:
                    removeEmployee(scanner);
                    break;
                case 4:
                    searchEmployee(scanner);
                    break;
                case 5:
                    displayAllEmployees();
                    break;
                case 6:
                    System.out.println("Exiting the system.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 6);
    }

    private static void addEmployee(Scanner scanner) {
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter Employee Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Employee Salary: ");
        double salary = scanner.nextDouble();
        employees.add(new Employee(id, name, salary));
        System.out.println("Employee added successfully.");
    }

    private static void updateEmployee(Scanner scanner) {
        System.out.print("Enter Employee ID to update: ");
        int id = scanner.nextInt();
        scanner.nextLine();
        for (Employee emp : employees) {
            if (emp.id == id) {
                System.out.print("Enter New Name: ");
                emp.name = scanner.nextLine();
                System.out.print("Enter New Salary: ");
                emp.salary = scanner.nextDouble();
                System.out.println("Employee updated successfully.");
                return;
            }
        }
        System.out.println("Employee not found.");
    }

    private static void removeEmployee(Scanner scanner) {
        System.out.print("Enter Employee ID to remove: ");
        int id = scanner.nextInt();
        for (int i = 0; i < employees.size(); i++) {
            if (employees.get(i).id == id) {
                employees.remove(i);
                System.out.println("Employee removed successfully.");
                return;
            }
        }
        System.out.println("Employee not found.");
    }

    private static void searchEmployee(Scanner scanner) {
        System.out.print("Enter Employee ID to search: ");
        int id = scanner.nextInt();
        for (Employee emp : employees) {
            if (emp.id == id) {
                System.out.println("Employee Found: " + emp);
                return;
            }
        }
        System.out.println("Employee not found.");
    }

    private static void displayAllEmployees() {
        if (employees.isEmpty()) {
            System.out.println("No employees in the system.");
        } else {
            System.out.println("Employee List:");
            for (Employee emp : employees) {
                System.out.println(emp);
            }
        }
    }
}

Employee Management System:
1. Add Employee
2. Update Employee
3. Remove Employee
4. Search Employee
5. Display All Employees
6. Exit
Enter your choice: 1
Enter Employee ID: 101
Enter Employee Name: John Doe
Enter Employee Salary: 50000
Employee added successfully.

import java.util.ArrayList;
import java.util.Collection;
import java.util.Scanner;

class Card {
    private String symbol;
    private int number;

    public Card(String symbol, int number) {
        this.symbol = symbol;
        this.number = number;
    }

    public String getSymbol() {
        return symbol;
    }

    @Override
    public String toString() {
        return "Card [Symbol: " + symbol + ", Number: " + number + "]";
    }
}

public class CardCollectionSystem {
    private static Collection<Card> cards = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nCard Collection System:");
            System.out.println("1. Add Card");
            System.out.println("2. Find Cards by Symbol");
            System.out.println("3. Display All Cards");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addCard(scanner);
                    break;
                case 2:
                    findCardsBySymbol(scanner);
                    break;
                case 3:
                    displayAllCards();
                    break;
                case 4:
                    System.out.println("Exiting the system.");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 4);
    }

    private static void addCard(Scanner scanner) {
        System.out.print("Enter Card Symbol (e.g., Hearts, Spades): ");
        String symbol = scanner.nextLine();
        System.out.print("Enter Card Number: ");
        int number = scanner.nextInt();
        cards.add(new Card(symbol, number));
        System.out.println("Card added successfully.");
    }

    private static void findCardsBySymbol(Scanner scanner) {
        System.out.print("Enter Symbol to Search: ");
        String symbol = scanner.nextLine();
        boolean found = false;

        System.out.println("Cards with symbol '" + symbol + "':");
        for (Card card : cards) {
            if (card.getSymbol().equalsIgnoreCase(symbol)) {
                System.out.println(card);
                found = true;
            }
        }

        if (!found) {
            System.out.println("No cards found with the symbol '" + symbol + "'.");
        }
    }

    private static void displayAllCards() {
        if (cards.isEmpty()) {
            System.out.println("No cards in the collection.");
        } else {
            System.out.println("All Cards:");
            for (Card card : cards) {
                System.out.println(card);
            }
        }
    }
}
Card Collection System:
1. Add Card
2. Find Cards by Symbol
3. Display All Cards
4. Exit
Enter your choice: 1
Enter Card Symbol (e.g., Hearts, Spades): Hearts
Enter Card Number: 5
Card added successfully.

Enter your choice: 2
Enter Symbol to Search: hearts
Cards with symbol 'hearts':
Card [Symbol: Hearts, Number: 5]
import java.util.ArrayList;
import java.util.List;

class TicketBookingSystem {
    private List<String> bookedSeats = new ArrayList<>();
    private final int totalSeats = 10;

    public synchronized void bookSeat(String customerName) {
        if (bookedSeats.size() < totalSeats) {
            String seatNumber = "Seat-" + (bookedSeats.size() + 1);
            bookedSeats.add(seatNumber);
            System.out.println(customerName + " booked " + seatNumber);
        } else {
            System.out.println(customerName + " booking failed. No seats available.");
        }
    }

    public void displayBookedSeats() {
        System.out.println("\nAll booked seats:");
        for (String seat : bookedSeats) {
            System.out.println(seat);
        }
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem bookingSystem;
    private String customerName;

    public BookingThread(TicketBookingSystem bookingSystem, String customerName) {
        this.bookingSystem = bookingSystem;
        this.customerName = customerName;
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(customerName);
    }
}

public class TicketBookingSimulation {
    public static void main(String[] args) {
        TicketBookingSystem bookingSystem = new TicketBookingSystem();
        Thread customer1 = new BookingThread(bookingSystem, "Customer1");
        Thread customer2 = new BookingThread(bookingSystem, "Customer2");
        Thread customer3 = new BookingThread(bookingSystem, "Customer3");
        Thread vipCustomer1 = new BookingThread(bookingSystem, "VIP-Customer1");
        Thread vipCustomer2 = new BookingThread(bookingSystem, "VIP-Customer2");
        vipCustomer1.setPriority(Thread.MAX_PRIORITY);
        vipCustomer2.setPriority(Thread.MAX_PRIORITY);
        customer1.setPriority(Thread.NORM_PRIORITY);
        customer2.setPriority(Thread.NORM_PRIORITY);
        customer3.setPriority(Thread.NORM_PRIORITY);
        vipCustomer1.start();
        vipCustomer2.start();
        customer1.start();
        customer2.start();
        customer3.start();
        try {
            vipCustomer1.join();
            vipCustomer2.join();
            customer1.join();
            customer2.join();
            customer3.join();
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted: " + e.getMessage());
        }
        bookingSystem.displayBookedSeats();
    }
}
VIP-Customer1 booked Seat-1
VIP-Customer2 booked Seat-2
Customer1 booked Seat-3
Customer2 booked Seat-4
Customer3 booked Seat-5

All booked seats:
Seat-1
Seat-2
Seat-3
Seat-4
Seat-5
